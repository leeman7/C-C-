Project 3    

Four pirates want to compete for the 1000 pearls in a cave. Two of them
only know the password "Open, sesame!". Another two only know the password "Open, 
watermelon!". The two who use "Open, sesame!" to open the cave can get
10% of the remaining pearls each time. The two who use "Open, watermelon!"
to open the cave can get 15% of the remaining pearls. When one pirate is 
in the cave, another pirate cannot get in. If 10% or 15% of the pearls is 
not an integer, round it up to the ceiling integer. For example, if the result
is 3.14 pearls, the pirate can get 4 pearls.

Use four threads to simulate this. Each thread should execute in a loop.
When the pearls run out, stop all the threads and terminate the program.
Print out the number of pearls taken out by a pirate each time. 
And then you add all the pearls given out. If the total does not add up
to 1000, your program is not correct.

  
a. Write the program without considering the mutual exclusion. Run the
program several times to show that mutual exclusion is not guaranteed and
the result is not correct.

b. Write the program again considering the mutual exclusion. Run the 
program several times to show that mutual exclusion is guaranteed.

To make longer execution of threads, use some sleep(n) functions in 
the program. Experiment with n to choose the best one to show the 
results.

An example of incorrect program: suppose pirates A and B can get 10% of 
the pearls each time, C and D can get 15%.

Pirate A got 100 pearls.
Pirate B got 90 pearls.
Pirate C got 122 pearls.
Pirate D got 122 pearls. (Wrong! C and D access the cave at the same time!)
...
Finally, if you add up all the pearls in the hands of A, B, C, and D, the total
will not be 1000.


 
Submission:

In order not to lose any files, you'd better zip all your files into a .zip file. 
Submit your project to TRACS. You should write a readme textfile telling the grader 
how to run your programs. Without this file, it is very likely that your project
will not be run properly. 

